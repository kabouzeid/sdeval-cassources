"""
This is the template for extracting the solution for the computation problem of computing
the global dimension of a free algebra over QQ from the output of the computer algebra
system Singular.

.. moduleauthor:: Karim Abou Zeid <karim.abou.zeid@rwth-aachen.de>
"""

import xml.dom.minidom as dom
import re

#--------------------------------------------------
#---------------The template-----------------------
#--------------------------------------------------

def extractSolution(outpString):
    """
    This function extracts the solution of a global Dimension
    computation performed in Singular, using the executable code that was
    generated by the template in the same folder on a certain
    instance.

    It returns a string representation of the solution in XML-format.
    The XML-string will be given as follows::

      <FA_Q_dp_SOL>
        <gldim>
            gldim
        </gldim>
      </FA_Q_dp_SOL>

    If there is no solution given, or something is wrong with the given string,
    a ValueError is raised.

    :param outpString: The String that was returned by the Singular-execution
    :type  outpString: str
    :returns: XML-Representation of the solution.
    :rtype: str
    :raises: ValueError
    """
    if (type(outpString) != str):
        raise ValueError("Wrong Type of argument. String type expected.")
    solBeginStr = "=====Solution Begin====="
    solEndStr   = "=====Solution End====="
    solBeginPos = outpString.index(solBeginStr) + len(solBeginStr)
    solEndStrPos   = outpString.index(solEndStr)
    solStr = outpString[solBeginPos:solEndStrPos]
    if (solStr.strip()==""):
        raise ValueError("There is no solution to be found in the output-file")
    solStr = solStr.strip();
    #From here on, we can assume that we are dealing with a valid
    #string.
    #Construction of the XML-Document
    result = dom.Document()
    result.appendChild(result.createElement("FA_Q_dp_SOL"))
    tempNode = result.firstChild
    #Adding the basis
    tempNodeGlDim = tempNode.appendChild(result.createElement("gldim"))
    tempNodeGlDim.appendChild(result.createTextNode(solStr))
    return result.toprettyxml("  ")

